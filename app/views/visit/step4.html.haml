- content_for :header do
  %h1 Your visit date and time

- visiting_slots = Slot::TIMES[visit.prisoner.prison_name.downcase.to_sym]
- start_day = Date.tomorrow + Slot::LEAD_DAYS
- end_day = start_day + Slot::BOOKABLE_DAYS.days
- bookable_dates = start_day..end_day
- range_by_month = bookable_dates.group_by { |d| d.beginning_of_month }
- number_of_slots = Visit::MAX_SLOTS
- bookable_days = { sun: 0, mon: 1, tue: 2, wed: 3, thu: 4, fri: 5, sat: 6 }.keep_if { |k, v| visiting_slots.keys.include?(k) }.values
- current_slots = visit.slots.map{|s|s.date+'-'+s.times}

%p
  Choose 
  %strong up to three 
  visit times that will be sent to the prisonâ€™s booking team to check availability.

- if visit.slots.any? {|s| s.errors.any?}
  #error-summary.validation-summary.group(role="alert" tabindex="-1" aria-labelledby="error-heading")
    %h2#error-heading Your form could not be submitted.
    %p You need to select at least one slot and at most three slots.

#calendar

.slots.js-slotpicker{ :'data-optionlimits' => number_of_slots }
  .js-slotpicker-options.day-slots#in-the-past
    %p It is not possible to book a visit in the past
  .js-slotpicker-options.day-slots#too-far-ahead
    %p It is not possible to book a visit this far away
  .js-slotpicker-options.day-slots#booking-gap
    %p It is not possible to book a visit this soon

  - range_by_month.keys.each do |month|
    .slot__month{ :id => month.strftime('month-%Y-%m-%d') }(data-focusfirst="true")

      - range_by_month[month].each do |date|
        .js-slotpicker-options.day-slots.cf{ :id => "date-#{date.strftime('%Y-%m-%d')}" }
          - if visiting_slots.keys.include?(date.strftime('%a').downcase.to_sym)
            %h4= date.strftime("%A %e %B")
            - visiting_slots[date.strftime('%a').downcase.to_sym].each_with_index do |slot, index|
              - slot_start = Time.strptime(slot[0].to_s, '%H%M')
              - slot_end = Time.strptime(slot[1].to_s, '%H%M')
              %label.slot
                %strong= slot_start.strftime("%l:%M%P")
                %span.duration= (slot_end - slot_start).duration
                %input.js-slotpicker-option{ :value => "#{date.strftime('%Y-%m-%d')}-#{slot[0]}-#{slot[1]}" }(type="checkbox" name="slot")

          - else
            %p There are no sessions available on #{date.strftime('%A')}s.

.selected-slots
  %h3 Your visit times
  %p.hidden--mobile
    Use the arrows to order your chosen visit times.
    Chosen times can be removed using the '&times;' button.
  %ul
    - (1..number_of_slots).each_with_index do |i|
      %li
        - unless i == 1
          %a.slot-promote.js-promote-slot{ :href => "##{i}" }
        %a.slot-remove.js-remove-slot(href="#") &times;
        %p.date
        %p.time
        %p.placeholder Option #{[:one, :two, :three][i-1]}


= form_for visit, url: update_step4_path, :html => { :class => 'slot-form' } do |f|

  .js-slotpicker-chosen
    - @slots.each_with_index do |slot, index|
      = f.fields_for :slots, slot do |builder|

        .group.js-slotpicker-slot
          %label Option #{index+1}

          %select(name='visit[slots][][slot]')
            %option(value='') none
            - bookable_dates.each do |date|
              -# Only bookable days
              - if bookable_days.include?(date.wday)
                - weekday = date.strftime('%a').downcase.to_sym
                - if visiting_slots.keys.include?(weekday)
                  - visiting_slots[weekday].each_with_index do |slot, i|
                    - value = [date.strftime('%Y-%m-%d'), slot.join('-')].join('-')
                    - selected = value == current_slots[index-1] ? 'selected' : nil
                    %option{ value: value, selected: selected }= date.strftime('%A, %e %B - ') + Time.strptime(slot[0].to_s, '%H%M').strftime('%l:%M%P')

  .actions
    = f.button :Continue, :name => 'next', :value => 'continue', :class => 'button button-primary'

:javascript
  var bookable_from = '#{start_day.strftime('%Y-%m-%d')}',
    bookable_to = '#{end_day.strftime('%Y-%m-%d')}',
    current_slots = #{current_slots.to_json},
    bookable_days = #{bookable_days.to_json},
    bookable_dates = #{bookable_dates.map{|d|d.strftime('%Y-%m-%d')}.to_json};
